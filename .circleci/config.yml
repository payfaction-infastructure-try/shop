version: 2.1
orbs:
  # aws-ecr: circleci/aws-ecr@8.0.0
  aws-ecr: circleci/aws-ecr@6.15.1
  aws-ecs: circleci/aws-ecs@2.0.0
  aws-cli: circleci/aws-cli@2.1.0

jobs:
  build:
    machine: true
    steps:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_REPOSITORY_URL
          region: AWS_DEFAULT_REGION
          repo: "${AWS_RESOURCE_NAME_PREFIX}"
          tag: "${CIRCLE_SHA1}"
  deploy:
    docker:
      - image: "cimg/python:3.9.1"
    steps:
      - aws-cli/setup:
          aws-access-key-id: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - aws-ecs/update-service:
          container-env-var-updates: container=${AWS_RESOURCE_NAME_PREFIX}-service,name="TEXT",value="${TEXT}"
          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
          cluster-name: "${AWS_ECS_CLUSTER_NAME_PREFIX}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,image-and-tag=${AWS_ECR_REPOSITORY_URL}/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"
          verify-revision-is-deployed: true
      - run:
          name: Test deployment (Please manually tear down AWS resources after use, if desired)
          command: |
            TARGET_GROUP_ARN=$(aws ecs describe-services --cluster ${AWS_ECS_CLUSTER_NAME_PREFIX}-cluster --services ${AWS_RESOURCE_NAME_PREFIX}-service | jq -r '.services[0].loadBalancers[0].targetGroupArn')
            ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
            ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
            curl -s -o --retry 10 /dev/null -w '%{http_code}' http://$ELB_DNS_NAME | grep 200
workflows:
  build-and-deploy:
    jobs:
      - build:
          name: "build-dev"
          context:
            - aws-payfaction-dev
            - aws-resources-payfaction-dev
            - shop-dev
          filters:
            branches:
              only:
                - develop
      - deploy:
          name: "deploy-dev"
          requires:
            - build-dev
          context:
            - aws-payfaction-dev
            - aws-resources-payfaction-dev
            - shop-dev
          filters:
            branches:
              only:
                - develop
      - build:
          name: "build-prod"
          context:
            # - aws-payfaction-prod
            # - shop-prod
            - aws-payfaction-dev
            - aws-resources-payfaction-dev
            - shop-dev
          filters:
            branches:
              only:
                - master
      - deploy:
          name: "deploy-prod"
          requires:
            - build-prod
          context:
            # - aws-payfaction-prod
            # - shop-prod
            - aws-payfaction-dev
            - aws-resources-payfaction-dev
            - shop-dev
          filters:
            branches:
              only:
                - master
